# Vi mode {{{1
bindkey -v
KEYTIMEOUT=1

bindkey -M viins "^?" backward-delete-char

autoload -Uz select-quoted select-bracketed
zle -N select-quoted
zle -N select-bracketed

for m in visual viopp; do
    for c in {a,i}{\',\",\`}; do
        bindkey -M $m $c select-quoted
    done
    for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
        bindkey -M $m $c select-bracketed
    done
done

function _vi-mode-update-cursor() {
  local _shape=0
  case "${KEYMAP:-default}" in
    main|viins) _shape=6 ;;
    vicmd)      _shape=2 ;;
    *)          _shape=0 ;;
  esac
  printf $'\e[%d q' "${_shape}"
}

function zle-keymap-select() {
  _vi-mode-update-cursor "${KEYMAP}"
}
-
function zle-line-init() {
  (( ${+terminfo[smkx]} )) && echoti smkx
  _vi-mode-update-cursor "${KEYMAP}"
}
 
function zle-line-finish() {
  (( ${+terminfo[rmkx]} )) && echoti rmkx
  _vi-mode-update-cursor
}

zle -N zle-keymap-select
zle -N zle-line-init
zle -N zle-line-finish

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd ! edit-command-line

# Brew {{{1
eval "$(brew shellenv)"
fpath=("$(brew --prefix)/share/zsh/site-functions" $fpath)

# Prompt {{{1
function _get_git_branch() {
    local _root="${PWD}"
    while [ "${_root}" != "${HOME}" ] && [ ! -d "${_root}/.git" ]; do
        _root="${_root:h}"
    done

    if [ -e "${_root}/.git/HEAD" ]; then
        read -r _head < "$_root/.git/HEAD" || return
        local _branch=""
        case "${_head}" in
            ref:*) _branch="${_head#ref: refs/heads/}" ;;
            "") ;;
            *) _branch="${_head:0:7}" ;;
        esac
        local _prompt="%F{cyan}(${_branch})"

        local _status="$(git --no-optional-locks status --porcelain=v2 --branch 2>/dev/null | head -n5)"
        if [ -z "${_status}" ]; then
            print "${_prompt} "
            return 0
        fi
        if [ ! -z "$(echo ${_status} | grep -m1 '^[^#]')" ]; then
            _prompt="\e[3m${_prompt}\e[0m"
        fi
        if [ ! -z "$(echo ${_status} | grep -m1 '^# branch.ab \(+[1-9][0-9]* -[0-9]\+\|+[0-9]\+ -[1-9][0-9]*\)')" ]; then
            _prompt="%B${_prompt}%b"
        fi
        print "${_prompt} " 

        return 0
    fi

    return 1
}

setopt prompt_subst
PROMPT=$'%(?.%F{green}\U2714.%F{red}\U2718) %F{blue}%~ $(_get_git_branch)%F{yellow}\U276F%f '
PS2=$' %F{yellow}%_ \U2026%f '

# Editor {{{1
export MANPAGER='nvim +Man!'
export EDITOR='nvim'
export VISUAL='nvim'

# Colors {{{1
export CLICOLOR=1
export LSCOLORS="exgx"

# History {{{1
HISTFILE=$HOME/.cache/zsh/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.

# Completion {{{1
autoload -Uz compinit
compinit -d ~/.cache/zsh/.zcompdump

setopt AUTO_LIST                 # Automatically list choices on ambiguous completion.
setopt AUTO_MENU                 # Automatically use menu completion.
setopt COMPLETE_IN_WORD          # Complete from both ends of a word.

# Active completion cache
zstyle ':completion:*' use-cache on
# Define cache directory
zstyle ':completion:*' cache-path ~/.cache/zsh/.zcompcache
# Allow you to select in a menu
zstyle ':completion:*' menu select yes=0
# Case insensitive and allow for completing on the left side
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Autosuggestions
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
source ~/.config/zsh/plugins/zsh-autosuggestions.zsh
